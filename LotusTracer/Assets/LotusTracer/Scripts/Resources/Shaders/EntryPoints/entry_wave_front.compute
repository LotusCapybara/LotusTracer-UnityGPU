#pragma target 6.0

#pragma kernel Kernel_WF_InitIteration
#pragma kernel Kernel_WF_GenerateRays
#pragma kernel Kernel_WF_IntersectGeometry
#pragma kernel Kernel_WF_BounceBsdf
#pragma kernel Kernel_WF_AccumulateImageBuffer

#include "../constants.cginc"
#include "../tracingTypes.cginc"
#include "../tracingVariables.cginc"
#include "../Functions/common.cginc"
#include "../Functions/fresnel.cginc"
#include "../BRDF/bsdf_functions.cginc"
#include "../Functions/factories.cginc"
#include "../Functions/intersection.cginc"
#include "../BRDF/BxDF.cginc"
#include "../Functions/nee_direct_lights.cginc"

struct BufferSizes
{
    int qtyRays;
    int qtyBounceHits;
    int qtyValidSamples;
};

struct BounceHitInfo
{
    int triangleIndex;
    int rayIndex;
};

int _bounceIndex;

RWStructuredBuffer<BufferSizes> _BufferSizes;

RWStructuredBuffer<RenderRay> _BounceRays;

int _qtyBounceHits;
RWStructuredBuffer<BounceHitInfo> _BounceHits;

RWStructuredBuffer<float4> _RadianceAcc;

RWStructuredBuffer<RenderRay> _BounceSamples;
RWStructuredBuffer<float4> _Throughput;


[numthreads(1, 1,1)]
void Kernel_WF_InitIteration (uint3 id : SV_DispatchThreadID)
{
    for(int i = 0; i < 30; i++)
    {
        _BufferSizes[i].qtyRays = 0;
        _BufferSizes[i].qtyBounceHits = 0;
        _BufferSizes[i].qtyValidSamples = 0;
    }

    for(int p = 0; p < totalSize; p++)
    {
        _RadianceAcc[p] = float4(0, 0, 0, 1.0);
        _BounceSamples[p].pixelIndex = p;
        _Throughput[p] = (float4) 1.0;
    }
}

[numthreads(8,8,1)]
void Kernel_WF_GenerateRays (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;
    uint randState = id.x * someSeed + id.y * someSeed + iteration * someSeed + index;

    if(_bounceIndex == 0)
    {
        RenderRay ray = GetCameraRay(id, randState);
        ray.pixelIndex = index;

        int rayIndex;
        InterlockedAdd(_BufferSizes[0].qtyRays, 1, rayIndex);        
        _BounceRays[rayIndex] = ray;
    }
    else if(index < _BufferSizes[_bounceIndex].qtyValidSamples)
    {
        int rayIndex;
        InterlockedAdd(_BufferSizes[_bounceIndex].qtyRays, 1, rayIndex);

        RenderRay ray;
        ray.pixelIndex = _BounceSamples[index].pixelIndex;
        ray.origin = _BounceSamples[index].origin;
        ray.direction = _BounceSamples[index].direction;
        
        _BounceRays[rayIndex] = ray;
    }
}

[numthreads(8,8,1)]
void Kernel_WF_IntersectGeometry (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;

    if(index >= _BufferSizes[_bounceIndex].qtyRays)
        return;

    int hittingTriangleIndex = GetTriangleHitIndex(_BounceRays[index], INFINITY, _bounceIndex == 0);

    if(hittingTriangleIndex >= 0)
    {
        int hitIndex;
        InterlockedAdd(_BufferSizes[_bounceIndex].qtyBounceHits, 1, hitIndex);

        BounceHitInfo bounceHit;
        bounceHit.triangleIndex = hittingTriangleIndex;
        bounceHit.rayIndex = index;
        
        _BounceHits[hitIndex] = bounceHit;
    }    
}

[numthreads(8,8,1)]
void Kernel_WF_BounceBsdf (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;

    if(index >= _BufferSizes[_bounceIndex].qtyBounceHits)
        return; 


    BounceHitInfo bounceHit = _BounceHits[index];
    RenderRay renderRay =  _BounceRays[bounceHit.rayIndex];
    
    TriangleHitInfo hitInfo;
    hitInfo.isTriangle = true;
    GetTriangleHitInfo(bounceHit.triangleIndex, renderRay, INFINITY, hitInfo);
    
    uint randState = id.x * someSeed + id.y * someSeed + iteration * someSeed + index;
    ScatteringData bounceData = MakeScatteringData(randState, hitInfo);

    
    int pixelIndex = renderRay.pixelIndex;
    float4 throughput = _Throughput[pixelIndex];

    if(bounceData.emissionPower > 0)
    {
        _RadianceAcc[pixelIndex].rgb += throughput.rgb * bounceData.emissionPower * bounceData.color;
        return;
    }
    
    float3 bounceBSDF;
    float bouncePDF;

    bool validSample = GetBSDF_Sample(randState, bounceData);
    if(!validSample)
        return;
    GetBSDF_F(randState, bounceData, bounceBSDF, bouncePDF);
    if(bouncePDF <= 0)
        return;

    throughput.rgb *=  bounceBSDF / bouncePDF;
    throughput.a = bouncePDF;

       
    
    if(_bounceIndex > 3)
    {
        // q would be "the probabilities of continuing the path"
        float q = min(MaxComponent(throughput.rgb) + 0.01, 0.9);
        if (GetRandom0to1(randState) > q)
            return;
    
        // like we do with all contributions, we should divide by the current probability
        // we do this to "balance" probabilities with the ones we terminated. If we didnt' do this
        // we would be introducing bias towards the paths that were continued
        throughput.rgb /= q;
    }

    _Throughput[pixelIndex] = throughput;   

    RenderRay continuationRay;
    continuationRay.pixelIndex = pixelIndex;
    continuationRay.direction = bounceData.L;
    continuationRay.origin = bounceData.surfacePoint + bounceData.WorldNormal * 2.0 * EPSILON;
    
    int sampleIndex;
    InterlockedAdd(_BufferSizes[_bounceIndex + 1].qtyValidSamples, 1, sampleIndex);              
    _BounceSamples[sampleIndex] = continuationRay;
}


[numthreads(8,8,1)]
void Kernel_WF_AccumulateImageBuffer (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;

    float iterationWeight = 1.0 / (iteration + 1.0);   
    float3 accumulated = _SamplingBufferPrev[id.xy] * (1.0 - iterationWeight) + (_RadianceAcc[index].rgb * iterationWeight);
    _SamplingBuffer[id.xy] = float4(accumulated.xyz, 1);
    _SamplingBufferPrev[id.xy] = _SamplingBuffer[id.xy];    
}
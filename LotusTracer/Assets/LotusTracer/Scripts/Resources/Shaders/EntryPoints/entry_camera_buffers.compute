#pragma kernel Kernel_CameraDebugTextures
#pragma kernel Kernel_BVHDensity

#include "../constants.cginc"
#include "../tracingTypes.cginc"
#include "../Functions/common.cginc"
#include "../tracingVariables.cginc"
#include "../Functions/fresnel.cginc"
#include "../Functions/intersection.cginc"
#include "../BRDF/bsdf_functions.cginc"
#include "../Functions/post_processing.cginc"
#include "../Functions/factories.cginc"
#include "../BRDF/BxDF.cginc"


RWTexture2D<float4> _TextureColorBuffer;
RWTexture2D<float4> _TextureNormalBuffer;
RWTexture2D<float4> _TextureRoughnessBuffer;
RWTexture2D<float4> _TextureMetallicBuffer;
RWTexture2D<float4> _TextureEmissiveBuffer;
RWTexture2D<float4> _TextureBVHDensityBuffer;
RWTexture2D<float4> _TextureSchlickWeightBuffer;
RWTexture2D<float4> _TextureDielectricFresnelBuffer;
RWTexture2D<float4> _TextureSchlickFresnelBuffer;

[numthreads(8,8,1)]
void Kernel_CameraDebugTextures (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;
    RenderRay pathRay = _CameraRays[index];
    TriangleHitInfo hitInfo = (TriangleHitInfo) 0;

    float3 baseColor = MAGENTA;
    float3 normalColor = MAGENTA;
    float3 roughColor = MAGENTA;
    float3 metallicColor = MAGENTA;
    float3 emissiveColor = MAGENTA;
    float3 schlickWeightColor = MAGENTA;
    float3 dielectricFresnelColor = MAGENTA;
    float3 schlickFresnelColor = MAGENTA;
    
    int rand = 65465;
    
    bool foundHit = GetBounceHit(hitInfo, pathRay, INFINITY, true);

    if(!hitInfo.isFrontFace)
    {
        pathRay.origin = hitInfo.position + pathRay.direction * EPSILON * 3.0;
        foundHit = GetBounceHit(hitInfo, pathRay, INFINITY, true);
    }

    if(foundHit)
    {
        ScatteringData scattering_data = MakeScatteringData(rand, hitInfo);

        baseColor = scattering_data.color;
        
        float3 normalMap = (scattering_data.WorldNormal * 0.5) + 0.5; 
        normalColor = normalMap;

        roughColor = scattering_data.roughness;
        metallicColor = scattering_data.metallic;
        emissiveColor = scattering_data.emissionPower;

        ScatteringToLocal(scattering_data);

        float3 reflectL = reflect(- scattering_data.V, WORLD_UP);
        float3 reflectH = normalize(scattering_data.V + reflectL);
        
        // schlick weight
        schlickWeightColor = (float3) SchlickWeight(scattering_data.V.y);

        dielectricFresnelColor = DielectricFresnel( dot(scattering_data.V, reflectH) , scattering_data.eta);

        float cSpec0 = SLERP(SchlickR0FromEta( scattering_data.eta), scattering_data.color, scattering_data.metallic);
        schlickFresnelColor = SchlickFresnel(cSpec0, dot(scattering_data.V, reflectH)); // for dielectric and metallic
        //schlickFresnelColor = SchlickFresnel(0.05, dot(scattering_data.V, reflectH)); // for clear coat
    }

    _TextureColorBuffer[id.xy] = float4(baseColor.xyz, 1);
    _TextureNormalBuffer[id.xy] = float4(normalColor.xyz, 1);
    _TextureRoughnessBuffer[id.xy] = float4(roughColor.xyz, 1);
    _TextureMetallicBuffer[id.xy] = float4(metallicColor.xyz, 1);
    _TextureEmissiveBuffer[id.xy] = float4(emissiveColor.xyz, 1);

    _TextureSchlickWeightBuffer[id.xy] = float4(schlickWeightColor.xyz, 1);
    _TextureDielectricFresnelBuffer[id.xy] = ACESFilter( float4(dielectricFresnelColor.xyz, 1) );
    _TextureSchlickFresnelBuffer[id.xy] = float4(schlickFresnelColor.xyz, 1);
}

[numthreads(8,8,1)]
void Kernel_BVHDensity (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;
    RenderRay pathRay = _CameraRays[index];

    float qtyHits = 0;
    
    for(int i = 0; i < treeNodesQty; i++)
    {
        BVH4Node node = _AccelTree[i];

        if(DoesRayHitBounds(pathRay, node.bounds))
        {
            qtyHits++;
        }
    }

    float3 color =  float3(0, 0, 0);
    float divisor = 70.0;
    color.x = max(0, qtyHits - divisor) / divisor;
    qtyHits -= divisor;
    color.y = max(0, qtyHits - divisor) / divisor;
    qtyHits -= divisor;
    color.z = max(0, qtyHits) / divisor;
    
    _TextureBVHDensityBuffer[id.xy] = float4(color.xyz, 1); 
}

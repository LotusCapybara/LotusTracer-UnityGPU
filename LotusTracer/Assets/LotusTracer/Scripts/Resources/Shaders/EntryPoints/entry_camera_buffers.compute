#pragma kernel Kernel_CameraDebugTextures

#include "../constants.cginc"
#include "../tracingTypes.cginc"
#include "../tracingVariables.cginc"
#include "../Functions/common.cginc"
#include "../Functions/fresnel.cginc"
#include "../BRDF/bsdf_functions.cginc"
#include "../Functions/factories.cginc"
#include "../Functions/intersection.cginc"
#include "../BRDF/BxDF.cginc"

#define DEBUG_TYPE_COLOR 0
#define DEBUG_TYPE_NORMAL 1
#define DEBUG_TYPE_ROUGH 2
#define DEBUG_TYPE_METALLIC 3
#define DEBUG_TYPE_EMISSIVE 4
#define DEBUG_TYPE_SCHLICK_WEIGHT 5
#define DEBUG_TYPE_SCHLICK_FRESNEL 6
#define DEBUG_TYPE_SCHLICK_FRESNEL_COLOR 7
#define DEBUG_TYPE_DIELECTRIC_FRESNEL 8
#define DEBUG_TYPE_BVH_DENSITY 9
#define DEBUG_TYPE_Dist_D 10
#define DEBUG_TYPE_Dist_GV 11
#define DEBUG_TYPE_Dist_GL 12
#define DEBUG_TYPE_Eval_Diffuse 13
#define DEBUG_TYPE_Eval_Reflect 14


uint _debugBufferType;
RWTexture2D<float4> _TextureDebugBuffer;

float3 Get_BVHDensity (RenderRay pathRay)
{
    float qtyHits = 0;
    
    for(int i = 0; i < treeNodesQty; i++)
    {
        BVH4Node node = _AccelTree[i];

        bool isLeaf = (node.data & 0x1) == 1;

        if(isLeaf)
            continue;
        
        int qtyElements = (node.data >> 9) & 0xf;

        BoundsBox bb[8];
        bb[0] =  DecompressBounds(node.bb01.xy, node);
        bb[1] =  DecompressBounds(node.bb01.zw, node);
        bb[2] =  DecompressBounds(node.bb23.xy, node);
        bb[3] =  DecompressBounds(node.bb23.zw, node);
        bb[4] =  DecompressBounds(node.bb45.xy, node);
        bb[5] =  DecompressBounds(node.bb45.zw, node);
        bb[6] =  DecompressBounds(node.bb67.xy, node);
        bb[7] =  DecompressBounds(node.bb67.zw, node);

        
        float entryDist;
        for(int ch = 0; ch < qtyElements; ch++)
        {
            bool intersects = DoesRayHitBounds(pathRay, bb[ch], entryDist, (float3)1.0 / pathRay.direction);

            if(intersects)
            {
                qtyHits++;
            }
        }            
    }

    float3 colorA = float3(0, 0, 0);       // 0 - 100
    float3 colorB = float3(0.4, 0.4, 0.4); // 101-200
    float3 colorC = float3(0.8, 0.8, 0.0); // 201-300
    float3 colorD = float3(0.8, 0.0, 0.8); // 301-400
    float3 colorE = float3(0.9, 0.9, 0.9); // 401-1000

    float3 color;

    if(qtyHits <= 100)
        color = lerp(colorA, colorB,  qtyHits * 0.01);
    else if(qtyHits <= 200)
        color = lerp(colorB, colorC,  (qtyHits - 100.0) * 0.01);
    else if(qtyHits <= 300)
        color = lerp(colorC, colorD,  (qtyHits - 200.0) * 0.01);
    else 
        color = lerp(colorD, colorE,  (qtyHits - 300.0) * 0.005);
        
   
    return color;
}

[numthreads(8,8,1)]
void Kernel_CameraDebugTextures (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;
    uint rand = 17 * id * someSeed;
    RenderRay pathRay = GetCameraRay(id, rand);
    TriangleHitInfo hitInfo = (TriangleHitInfo) 0;

    float3 finalColor = V_ONE;   
    
    bool foundHit = GetBounceHit(hitInfo, pathRay, INFINITY, true);

    if(!hitInfo.isFrontFace)
    {
        pathRay.origin = hitInfo.position + pathRay.direction * EPSILON * 3.0;
        foundHit = GetBounceHit(hitInfo, pathRay, INFINITY, true);
    }

    if(foundHit)
    {
        ScatteringData scattering_data = MakeScatteringData(rand, hitInfo);
        scattering_data.L = reflect(- scattering_data.V, scattering_data.WorldNormal);
        scattering_data.H = normalize(scattering_data.V + scattering_data.L);

        switch (_debugBufferType)
        {
            case DEBUG_TYPE_COLOR:
                finalColor = scattering_data.color;
            break;
            
            case DEBUG_TYPE_NORMAL:
                float3 normalMap = (scattering_data.WorldNormal * 0.5) + 0.5; 
                finalColor = normalMap;            
            break;
            
            case DEBUG_TYPE_ROUGH:
                finalColor = (float3) scattering_data.roughness;
            break;
            
            case DEBUG_TYPE_METALLIC:
                finalColor = (float3) scattering_data.metallic;
            break;
            
            case DEBUG_TYPE_EMISSIVE:
                finalColor = (float3) scattering_data.emissionPower;
            break;
            
            case DEBUG_TYPE_SCHLICK_WEIGHT:
                ScatteringToLocal(scattering_data);                
                finalColor = (float3) SchlickWeight(scattering_data.V.y);
            break;
            
            case DEBUG_TYPE_SCHLICK_FRESNEL:
                ScatteringToLocal(scattering_data);
                finalColor = SchlickFresnel(scattering_data.cSpec0, dot(scattering_data.L, scattering_data.H)); // for dielectric and metallic
                //schlickFresnelColor = SchlickFresnel(0.05, dot(scattering_data.V, reflectH)); // for clear coat
            break;

            case DEBUG_TYPE_SCHLICK_FRESNEL_COLOR:
                ScatteringToLocal(scattering_data);
                finalColor = SchlickFresnel_V(scattering_data.cSpec0, dot(scattering_data.L, scattering_data.H)); // for dielectric and metallic
                //schlickFresnelColor = SchlickFresnel(0.05, dot(scattering_data.L, reflectH)); // for clear coat
            break;
            
            
            case DEBUG_TYPE_DIELECTRIC_FRESNEL:
                ScatteringToLocal(scattering_data);
                finalColor = DielectricFresnel( abs(dot(scattering_data.V, scattering_data.H)) , scattering_data.eta);
            break;
            
            case DEBUG_TYPE_BVH_DENSITY:
                finalColor = Get_BVHDensity(pathRay);
            break;

            case DEBUG_TYPE_Dist_D:
                ScatteringToLocal(scattering_data);
                finalColor = D_GGX(scattering_data.H, scattering_data.ax, scattering_data.ay);
            break;

            case DEBUG_TYPE_Dist_GV:
                ScatteringToLocal(scattering_data);
                finalColor = D_GGX(scattering_data.V, scattering_data.ax, scattering_data.ay);
            break;

            case DEBUG_TYPE_Dist_GL:
                ScatteringToLocal(scattering_data);
                finalColor = D_GGX(scattering_data.L, scattering_data.ax, scattering_data.ay);
            break;

            case DEBUG_TYPE_Eval_Diffuse:
            {
                ScatteringToLocal(scattering_data);
                Sample_Diffuse(rand, scattering_data );
                scattering_data.isReflection = true;
                EvaluationVars ev = MakeEvaluationVars(scattering_data);

                float3 f = V_ZERO;
                float pdf = 0; 
                Evaluate_Diffuse_Lambert(f, pdf, scattering_data, ev );            
                finalColor = f / pdf;
            }
            break;

            case DEBUG_TYPE_Eval_Reflect:
            {
                ScatteringToLocal(scattering_data);
                Sample_Specular(rand, scattering_data );
                scattering_data.isReflection = true;
                    
                EvaluationVars ev = MakeEvaluationVars(scattering_data);

                float3 f = V_ZERO;
                float pdf = 0;
                float3 F = SchlickFresnel(scattering_data.cSpec0, dot(scattering_data.L, scattering_data.H)); // for dielectric and metallic                    
                Evaluate_Specular(f, pdf, scattering_data, ev, F);            
                finalColor = f / pdf;
            }
            break;
            
            
        }
    }

    _TextureDebugBuffer[id.xy] = float4(finalColor.xyz, 1);    
}